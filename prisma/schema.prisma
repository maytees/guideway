// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum ClubCategory {
    ACADEMIC
    ARTS_AND_CULTURE
    BUSINESS_AND_ENTREPRENEURSHIP
    COMMUNITY_SERVICE_AND_VOLUNTEERING
    ENVIRONMENTAL_AND_SUSTAINABILITY
    HEALTH_AND_WELLNESS
    HOBBIES_AND_INTERESTS
    IDENTITY_AND_DIVERSITY
    MEDIA_AND_JOURNALISM
    POLITICAL_AND_ACTIVISM
    RELIGIOUS_AND_SPIRITUAL
    SOCIAL_AND_NETWORKING
    SPORTS_AND_RECREATION
    TECHNOLOGY_AND_INNOVATION
}

model Role {
    id          String   @id @default(cuid())
    name        String
    description String?
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now())
    group       Group    @relation(fields: [groupId], references: [id])
    groupId     String

    users       User[]
    permissions String[] // List of permissions (defined in app)
}

model Group {
    id          String       @id @default(cuid())
    name        String
    description String
    category    ClubCategory
    created_at  DateTime     @default(now())
    updated_at  DateTime     @default(now())
    owner       User         @relation("GroupOwner", fields: [owner_id], references: [id])
    owner_id    String
    members     User[]       @relation("GroupMembers")
    logo        String?
    website     String?
    email       String?
    join_code   String       @unique
    posts       Post[]
    userId      String?

    pinnedBy User[] @relation("UserPinnedGroups")
    roles    Role[]
}

model PostTag {
    id     Int    @id @default(autoincrement())
    value  String // Text
    color  String // Hex value
    Post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId Int?
}

model Post {
    id         Int       @id @default(autoincrement())
    title      String
    content    String
    created_at DateTime  @default(now())
    updated_at DateTime  @default(now())
    author     User      @relation(fields: [author_id], references: [id])
    author_id  String    @map("author_id")
    club       Group     @relation(fields: [club_id], references: [id], onDelete: Cascade)
    club_id    String    @map("club_id")
    likes      Like[]
    comments   Comment[]
    isDraft    Boolean   @default(false)
    isPinned   Boolean   @default(false)
    viewCount  Int       @default(0)
    shareCount Int       @default(0)
    tags       PostTag[]
}

model Comment {
    id         Int           @id @default(autoincrement())
    content    String
    created_at DateTime      @default(now())
    updated_at DateTime      @default(now())
    author_id  String        @map("author_id")
    author     User          @relation(fields: [author_id], references: [id], onDelete: Cascade)
    post       Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    Int           @map("post_id")
    likes      CommentLike[]
}

model Like {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    user_id    String   @map("user_id")
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    post_id    Int      @map("post_id")
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

    @@unique([user_id, post_id])
}

model CommentLike {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    user_id    String   @map("user_id")
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    comment_id Int
    comment    Comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)

    @@unique([user_id, comment_id])
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?                @unique // This is required due to OAuth usernames
    email                 String?                @unique
    emailVerified         DateTime?
    phone                 String?                @unique
    image                 String?
    password              String?
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    Session               Session[]

    // Appearance
    colorScheme String @default("theme-zinc")
    font        String @default("font-normal")
    colorMode   String @default("light") // Either light, dark, or system

    google_id String? @unique

    Post        Post[]
    Comment     Comment[]
    Like        Like[]
    CommentLike CommentLike[]

    ownedGroups Group[] @relation("GroupOwner")
    groups      Group[] @relation("GroupMembers")
    groupId     String?

    pinnedGroups Group[] @relation("UserPinnedGroups")
    Role         Role?   @relation(fields: [roleId], references: [id])
    roleId       String?
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model UpdatesUser {
    id        String @id @default(cuid())
    email     String @unique
    firstName String
}
